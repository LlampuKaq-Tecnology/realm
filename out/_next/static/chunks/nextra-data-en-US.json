{"/":{"title":"Introducción","data":{"":"La documentación de \"@llampukaq/realm\" es una valiosa guía que te ayudará a aprovechar al máximo la potencia de MongoDB Realm en tu aplicación React. Esta biblioteca está diseñada para simplificar y acelerar el desarrollo al proporcionar una serie de hooks y mejoras que facilitan la integración y la interacción con Realm.MongoDB Realm es una plataforma de desarrollo de aplicaciones en la nube que ofrece una base de datos en tiempo real y servicios de backend escalables. Al combinar Realm con React, puedes crear aplicaciones web altamente eficientes y receptivas de manera más rápida y efectiva.En esta documentación, exploraremos cómo instalar, configurar y utilizar \"@llampukaq/realm\" en tu proyecto React. Aprenderás a aprovechar los hooks personalizados que ofrece esta biblioteca para gestionar de manera eficiente la autenticación, las consultas de datos y las actualizaciones en tiempo real. También descubrirás las mejoras que esta biblioteca aporta al flujo de trabajo de desarrollo, lo que te permitirá concentrarte en la lógica de tu aplicación en lugar de lidiar con la complejidad de la integración con Realm.Si estás buscando una forma más rápida y efectiva de incorporar MongoDB Realm en tu aplicación React y mejorar tu flujo de trabajo de desarrollo, esta documentación es la guía que necesitas. Sigue leyendo para descubrir cómo \"@llampukaq/realm\" puede simplificar tu proceso de desarrollo y ayudarte a crear aplicaciones web de alto rendimiento."}},"/installation":{"title":"Instalación","data":{"":"Instala la libreria usando npm\nnpm install @llampukaq/realm"}},"/plugins/EmailProvider":{"title":"Emailprovider","data":{}},"/plugins/GoogleProvider":{"title":"Googleprovider","data":{}},"/plugins/WriteYourPlugins":{"title":"Writeyourplugins","data":{}},"/usage/context":{"title":"Usar el RealmProvider","data":{"":"Para usar la libreria y todos sus hooks tienes que primero tines que configurar tu Provider\nimport { RealmProvider } from \"@/realm\";\nimport C from \"@/styles/C\";\nimport Context from \"@/styles/Context\";\nimport \"@/styles/globals.css\";\nimport type { AppProps } from \"next/app\";\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <RealmProvider\n      Error401={\n        <>\n          <Error401 />\n        </>\n      }\n      customDataUser={{ git: \"example@llampukaq.com\" }}\n      appId={process.env.NEXT_PUBLIC_APP_ID as string}\n      plugins={[\n        <Context name=\"example\" />,\n        <Context name=\"example\" />,\n        <Context name=\"example\" />,\n      ]}\n    >\n      <Component {...pageProps} />\n    </RealmProvider>\n  );\n}\nEjemplo usando _app.tsx de nextjsLa unica configuracion obligatoria es pasar el AppId, las demas son opcionales","appid#appId":"Este es el appid que provee mongo realm database en su ui o usando su linea de comando","error401#Error401":"Este parametro recibe un componente cuando el usuario ingrese a una pagina que requiera autenticacion","customdatauser#customDataUser":"Este parametro es un objeto que recibe varias confugaraciones cuando un usuario ingrese a la plataforma que se complementa con las funciones realm Saber mas","plugins#plugins":"Este es un apartado dedicado a extender la funcionalidad de @llampukaq/realm Saber mas"}},"/usage/hooks":{"title":"Hooks","data":{}},"/usage/realm":{"title":"Realm UI","data":{"mongo-atlas#Mongo Atlas":"Se necesita configurar un base de datos llamada user y una colleccion llamada users","app-services#App services":"En mongo App Services, primero tienes que configurar las reglas y darle acceso de escribir y leer al servicioDespues de esto tienes que crear un funcion que se llame userUsersAhora vas a colocar este codigo en la funcion userUsers\nexports = async function (type, id, data) {\n  const userCollection = context.services\n    .get(\"mongodb-atlas\")\n    .db(\"user\")\n    .collection(\"users\");\n  async function getUser() {\n    return await userCollection.findOne({ email: id }, { _id: false });\n  }\n  if (type === \"create\") {\n    const userExist = await getUser();\n    if (userExist) return userExist;\n    await userCollection.insertOne(data);\n    return await getUser();\n  }\n  if (type === \"update\") {\n    return await userCollection.findOneAndUpdate(\n      { userId: id },\n      { $set: data },\n      { returnNewDocument: true }\n    );\n  }\n};"}}}